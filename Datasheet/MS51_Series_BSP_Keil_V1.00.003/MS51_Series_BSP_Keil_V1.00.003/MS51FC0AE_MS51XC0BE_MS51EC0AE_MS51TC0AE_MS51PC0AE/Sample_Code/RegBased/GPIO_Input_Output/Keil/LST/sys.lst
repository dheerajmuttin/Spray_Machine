C51 COMPILER V9.52.0.0   SYS                                                               10/23/2019 15:26:19 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SYS
OBJECT MODULE PLACED IN .\Output\sys.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\..\Library\StdDriver\src\sys.c OPTIMIZE(7,SPEED) BROWSE INCDIR(..\
                    -..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG OBJECTEXTEND PRINT(.\LST\sys.lst) TABS(2) OBJEC
                    -T(.\Output\sys.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2019 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : June/21/2019
  11          //********************************************************************************************************
             -***
  12          #include "MS51_32K.h"
  13          bit BIT_TMP;
  14          unsigned char data  TA_REG_TMP,BYTE_TMP,SFRS_TMP;
  15          
  16            /**
  17            * @brief This API configures modify system HIRC value
  18            * @param[in] u8FsysMode . Valid values are:
  19            *                       - \ref HIRC_24                 :Internal HIRC 24MHz .
  20            *                       - \ref HIRC_16                 :Internal HIRC 16MHz.
  21            *                       - \ref HIRC_166                :Internal HIRC 16.6MHz.
  22            * @note      None.
  23            * @exmaple : MODIFY_HIRC(HIRC_24);
  24            */
  25          void MODIFY_HIRC(unsigned char u8HIRCSEL)
  26          {
  27   1          unsigned char data hircmap0,hircmap1;
  28   1          unsigned int trimvalue16bit;
  29   1          /* Check if power on reset, modify HIRC */
  30   1          SFRS = 0 ;
  31   1          switch (u8HIRCSEL)
  32   1          {
  33   2            case HIRC_24:
  34   2              IAPAL = 0x38;
  35   2            break;
  36   2            case HIRC_16:
  37   2              IAPAL = 0x30;
  38   2            break;
  39   2            case HIRC_166:
  40   2              IAPAL = 0x30;
  41   2            break;
  42   2          }
  43   1          set_CHPCON_IAPEN;
  44   1          IAPAH = 0x00;
  45   1          IAPCN = READ_UID;
  46   1          set_IAPTRG_IAPGO;
C51 COMPILER V9.52.0.0   SYS                                                               10/23/2019 15:26:19 PAGE 2   

  47   1          hircmap0 = IAPFD;
  48   1          IAPAL++;
  49   1          set_IAPTRG_IAPGO;
  50   1          hircmap1 = IAPFD;
  51   1          clr_CHPCON_IAPEN;
  52   1          switch (u8HIRCSEL)
  53   1          {
  54   2            case HIRC_166:
  55   2              trimvalue16bit = ((hircmap0 << 1) + (hircmap1 & 0x01));
  56   2              trimvalue16bit = trimvalue16bit - 15;
  57   2              hircmap1 = trimvalue16bit & 0x01;
  58   2              hircmap0 = trimvalue16bit >> 1;
  59   2      
  60   2            break;
  61   2            default: break;
  62   2          }
  63   1          TA = 0xAA;
  64   1          TA = 0x55;
  65   1          RCTRIM0 = hircmap0;
  66   1          TA = 0xAA;
  67   1          TA = 0x55;
  68   1          RCTRIM1 = hircmap1;
  69   1          clr_CHPCON_IAPEN;
  70   1          PCON &= CLR_BIT4;
  71   1      }
  72          
  73          
  74            /**
  75            * @brief This API configures system clock source
  76            * @param[in] u8FsysMode . Valid values are:
  77            *                       - \ref FSYS_HXT                 :External crsytal input.
  78            *                       - \ref FSYS_HIRC                :Internal HIRC (16MHz as default).
  79            *                       - \ref FSYS_LIRC                :Internal LIRC.
  80            *                       - \ref FSYS_OSCIN_P30            :External clock input from P3.0.
  81            *                       - \ref FSYS_HXTIN_P00            :External clock input from P0.0.
  82            * @note      None.
  83            * @exmaple : FsysSelect(FSYS_HXT);
  84            */
  85          void FsysSelect(unsigned char u8FsysMode)
  86          {
  87   1        switch (u8FsysMode)
  88   1        {
  89   2          //***** HXT enable part*****
  90   2          case FSYS_HXT:
  91   2              ClockEnable(FSYS_HIRC);                 //step1: switching system clock to HIRC
  92   2              ClockSwitch(FSYS_HIRC);
  93   2              ClockEnable(FSYS_HXT);                  //step2: switching system clock to HXT
  94   2              ClockSwitch(FSYS_HXT);
  95   2              clr_CKEN_HIRCEN;                      //step4: disable HIRC if needed 
  96   2          break;    
  97   2              
  98   2              //***** HIRC enable part *****  
  99   2          case FSYS_HIRC:
 100   2              ClockEnable(FSYS_HIRC);                 //step1: switching system clock HIRC
 101   2              ClockSwitch(FSYS_HIRC);
 102   2          break;
 103   2          
 104   2          //***** LIRC enable part*****
 105   2          case FSYS_LIRC:
 106   2              ClockEnable(FSYS_LIRC);                 //step2: switching system clock LIRC
 107   2              ClockSwitch(FSYS_LIRC);
 108   2              clr_CKEN_HIRCEN;                        //step4: disable HIRC if needed 
C51 COMPILER V9.52.0.0   SYS                                                               10/23/2019 15:26:19 PAGE 3   

 109   2          break;
 110   2              
 111   2          /***** ECLK enable part clock in with P3.0 *****/      
 112   2          case FSYS_OSCIN_P30:
 113   2              ClockEnable(FSYS_HIRC);                 //step1: switching system clock to HIRC
 114   2              ClockSwitch(FSYS_HIRC);
 115   2              ClockEnable(FSYS_OSCIN_P30);                 //step1: switching system clock to External clock
 116   2              ClockSwitch(FSYS_OSCIN_P30);
 117   2              clr_CKEN_HIRCEN;                        //step5: disable HIRC if needed 
 118   2          break;
 119   2          
 120   2          /***** ECLK enable part clock in with P0.0 *****/ 
 121   2          case FSYS_HXTIN_P00:
 122   2              ClockEnable(FSYS_HIRC);                 //step1: switching system clock to HIRC
 123   2              ClockSwitch(FSYS_HIRC);
 124   2              ClockEnable(FSYS_HXTIN_P00);                 //step1: switching system clock to External clock
 125   2              ClockSwitch(FSYS_HXTIN_P00);
 126   2              clr_CKEN_HIRCEN;                        //step5: disable HIRC if needed 
 127   2          break;
 128   2        }
 129   1      }
 130          
 131          void ClockEnable(unsigned char u8FsysMode)
 132          {
 133   1        switch (u8FsysMode)
 134   1        {
 135   2          /***** HIRC enable part ******/
 136   2          case FSYS_HXT:
 137   2              clr_CKEN_EXTEN1;                        /*step1: Enable extnal 4~ 24MHz crystal clock source.*/
 138   2              set_CKEN_EXTEN0;
 139   2              while(CKSWT|CLR_BIT7);                  /*step2: check clock source status and wait for ready*/
 140   2          break;
 141   2         
 142   2          /***** HIRC enable part ******/
 143   2          case FSYS_HIRC:
 144   2              set_CKEN_HIRCEN;                        //step1: Enable extnal clock source.
 145   2              while((CKSWT|CLR_BIT5)==CLR_BIT5);      //step2: check clock source status and wait for ready
 146   2          break;
 147   2         
 148   2          /***** LIRC enable part******/
 149   2          case FSYS_LIRC:
 150   2              set_CKEN_LIRCEN;                        //step1: Enable extnal clock source.
 151   2              while((CKSWT|CLR_BIT4)==CLR_BIT4);      //step2: check clock source status and wait for ready
 152   2          break;
 153   2          
 154   2          /***** ECLK P30 enable part ******/
 155   2          case FSYS_OSCIN_P30:
 156   2              set_CKEN_EXTEN1;                        //step1: Enable extnal clock source.
 157   2              set_CKEN_EXTEN0;
 158   2              while((CKSWT|CLR_BIT3)==CLR_BIT3);      //step2: check clock source status and wait for ready
 159   2          break;
 160   2          
 161   2          /***** ECLK P00 enable part ******/
 162   2          case FSYS_HXTIN_P00:
 163   2              set_CKEN_EXTEN1;                        //step1: Enable extnal clock source.
 164   2              clr_CKEN_EXTEN0;
 165   2              while((CKSWT|CLR_BIT6)==CLR_BIT6);      //step2: check clock source status and wait for ready
 166   2          break;
 167   2        }
 168   1      }
 169          
 170          void ClockDisable(unsigned char u8FsysMode)
C51 COMPILER V9.52.0.0   SYS                                                               10/23/2019 15:26:19 PAGE 4   

 171          {
 172   1        bit closeflag=0;
 173   1      
 174   1        SFRS = 0;
 175   1        switch (u8FsysMode)
 176   1        {
 177   2          /***** HXT Disable part ******/
 178   2          case FSYS_HXT:
 179   2            closeflag = 1;                
 180   2          break;
 181   2           /***** HIRC Disable part ******/
 182   2          case FSYS_HIRC:
 183   2              clr_CKEN_HIRCEN;                        
 184   2          break;
 185   2          /***** LIRC Disable part******/
 186   2          case FSYS_LIRC:
 187   2              clr_CKEN_LIRCEN;                        
 188   2          break;
 189   2          //***** ECLK from P3.0 Disable part ******/
 190   2          case FSYS_OSCIN_P30:
 191   2              closeflag = 1; 
 192   2          break;
 193   2          //***** ECLK from P0.0 Disable part ******/
 194   2          case FSYS_HXTIN_P00:
 195   2              closeflag = 1; 
 196   2          break;
 197   2        }
 198   1        if (closeflag)
 199   1        {
 200   2          SFRS=0;BIT_TMP=EA;EA=0;TA=0xAA;TA=0x55;CKEN&=0x3F;EA=BIT_TMP;
 201   2          closeflag = 0;
 202   2        }
 203   1        
 204   1      }
 205          
 206          void ClockSwitch(unsigned char u8FsysMode)
 207          {
 208   1        bit exflag=0;
 209   1        SFRS = 0 ;
 210   1        BIT_TMP=EA;EA=0;
 211   1        switch (u8FsysMode)
 212   1        {
 213   2          /***** HXT Disable part*****/
 214   2          case FSYS_HXT:
 215   2              exflag = 1;
 216   2          break;    
 217   2          /***** HIRC Disable part ******/
 218   2          case FSYS_HIRC:
 219   2              clr_CKSWT_OSC1;
 220   2              clr_CKSWT_OSC0;
 221   2          break;
 222   2          /***** LIRC Disable part******/
 223   2          case FSYS_LIRC:
 224   2              set_CKSWT_OSC1;
 225   2              clr_CKSWT_OSC0;
 226   2          break;
 227   2          /***** ECLK P30 Disable part ******/
 228   2          case FSYS_OSCIN_P30:
 229   2              exflag = 1;
 230   2          break;
 231   2          /***** ECLK P00 Disable part ******/
 232   2          case FSYS_HXTIN_P00:
C51 COMPILER V9.52.0.0   SYS                                                               10/23/2019 15:26:19 PAGE 5   

 233   2              exflag = 1;
 234   2          break;
 235   2        }
 236   1        if (exflag)
 237   1        {
 238   2              clr_CKSWT_OSC1;
 239   2              set_CKSWT_OSC0;
 240   2        }
 241   1        EA = BIT_TMP;
 242   1      }
 243          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    949    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
